name: Build and Test Hosting + Functions

on:
  workflow_call:
    inputs:
      deploy-functions:
        description: "Firebase project for deploying functions"
        default: ''
        required: false
        type: string

jobs:
  build-all:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      #####
      ## Node and Next setup.
      ##
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Cache next.js build
        id: cache-next
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: List the state of node modules
        if: ${{ steps.cache-next.outputs.cache-hit != 'true' }}
        continue-on-error: true
        run: npm list; npm --prefix functions list


      #####
      ## Python setup.
      ##
      - uses: actions/setup-python@v5
        with:
          cache: 'pip'

      - name: Setup functions-python/venv
        working-directory: functions-python
        run: |
          python -m venv venv
          . venv/bin/activate
          python -m pip install -r requirements.txt

      #####
      ## Firebase setup
      ##
      - name: Cache firebase emulators
        uses: actions/cache@v4
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-${{ steps.cache-next.outputs.firebase-tools }}

      #####
      ## Bulid test the frontend
      ##
      - run: npm ci
      #- run: npm run build
      #- run: npm test

      #####
      ## Bulid test the functions
      ##
      - run: npm --prefix functions ci
      #- run: npm --prefix functions run build
      #- run: npm --prefix functions test

      - name: Deploy Functions
        if: ${{ inputs.deploy-functions != '' }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          NODE_ENV: 'production'
        run: |
          rm -rf functions/lib &&
          npm --prefix functions run build
          npm --prefix functions run deploy -- --token $FIREBASE_TOKEN -P "${{ inputs.deploy-functions }}"
